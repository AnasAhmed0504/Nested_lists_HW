def read_matrix():
    rows = int(input())
    assert rows > 0
    lst_of_lsts = [0]*rows

    for row in range(rows):
        lst_of_lsts = list(map(int,input().split()))
        return rows, len(lst_of_lsts), lst_of_lsts

def argfirst(lst):      #first occurance
    return lst.index(max(lst))

def arglast(lst):       #last occurance
    return len(lst) - lst[::-1].index(max(lst)) -1
    #for simplicity let's divide it into 3 parts
    #the middle is reversing the list, then taking the idx from the back
    #then the left & right parts for reversing the number itself 
    #to make the indexing back to normal
    #من الاخر لفها عشان يجيب الترقيم من ورا وبعدين لفها تاني عشان يجيب الترقيم الأصلي
def flat_matrix(matrix):
    return [value for row in matrix for value in row]

def from1D_to_2D(cols, idx):
    return idx//cols, idx % cols

if __name__ == '__main__':
    rows, cols, matrix = read_matrix()
    lst = flat_matrix(matrix)
    idx = arglast(lst)
    pos = from1D_to_2D(cols, idx)
    print(f'max value at position {pos}, with value {lst[idx]}')